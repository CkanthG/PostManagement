apiVersion: v1
kind: ConfigMap
metadata:
  name: case-management-config-map
  namespace: default
data:
  MONGO_DB_HOST: "mongo-mongodb.default.svc.cluster.local"
  MONGO_DB_DATABASE: "store"
  MONGO_DB_USER: "root"
  MONGO_DB_PORT: "27017"
  RABBITMQ_MASTER: "rabbitmq-1712217019.default.svc.cluster.local"
  RABBITMQ_PORT: "5672"
  RABBITMQ_USER: "user"
  POSTS_QUEUE: "posts-queue"

---

apiVersion: v1
kind: Secret
metadata:
  name: case-management-secret-map
  namespace: default
data:
  MONGO_DB_PASSWORD: "a0NNUUFDdmszSw=="
  RABBITMQ_PASSWORD: "YkZoejhHcmN2QVpBSTJjUw=="

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: case-management
  labels:
    app: case-management
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  replicas: 2
  selector:
    matchLabels:
      app: case-management
  progressDeadlineSeconds: 300
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: case-management
    spec:
      containers:
        - name: case-management
          image: docker.io/sreekanthgaddoju/case-management:latest
          terminationMessagePolicy: FallbackToLogsOnError
          ports:
            - name: web
              containerPort: 8080
          resources:
            limits:
              cpu: 500m
              memory: 4G
            requests:
              cpu: 500m
              memory: 2G
          env:
            - name: MONGO_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: case-management-config-map
                  key: MONGO_DB_HOST
            - name: MONGO_DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: case-management-config-map
                  key: MONGO_DB_PORT
            - name: MONGO_DB_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: case-management-config-map
                  key: MONGO_DB_DATABASE
            - name: MONGO_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: case-management-config-map
                  key: MONGO_DB_USER
            - name: MONGO_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: case-management-secret-map
                  key: MONGO_DB_PASSWORD
            - name: POSTS_QUEUE
              valueFrom:
                configMapKeyRef:
                  name: case-management-config-map
                  key: POSTS_QUEUE
            - name: RABBITMQ_MASTER
              valueFrom:
                configMapKeyRef:
                  name: case-management-config-map
                  key: RABBITMQ_MASTER
            - name: RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: case-management-config-map
                  key: RABBITMQ_PORT
            - name: RABBITMQ_USER
              valueFrom:
                configMapKeyRef:
                  name: case-management-config-map
                  key: RABBITMQ_USER
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: case-management-secret-map
                  key: RABBITMQ_PASSWORD
          volumeMounts:
            - name: case-management-persistent-storage
              mountPath: /var/lib/case-management
      volumes:
        - name: case-management-persistent-storage
          persistentVolumeClaim:
            claimName: case-management-pv-claim
---

kind: Service
apiVersion: v1
metadata:
  name: case-management
  labels:
    app: case-management
spec:
  selector:
    app: case-management
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: case-management
  labels:
    app: case-management
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: letsencrypt-production
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "200m"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  rules:
    - host: case-management
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: case-management
                port:
                  number: 80
  tls:
    - hosts:
        - store
      secretName: case-management-cert
